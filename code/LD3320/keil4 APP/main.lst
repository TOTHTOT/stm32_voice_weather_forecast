C51 COMPILER V9.60.0.0   MAIN                                                              05/09/2024 22:01:22 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN ..\obj\main.obj
COMPILER INVOKED BY: E:\Keil_C51\C51\BIN\C51.EXE ..\code\main.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\code;..\user) D
                    -EBUG OBJECTEXTEND PRINT(.\main.lst) TABS(2) OBJECT(..\obj\main.obj)

line level    source

   1          /*******************************************************
   2          **  CPU: STC11L08XE
   3          **  晶振：22.1184MHZ
   4          **  波特率：9600 bit/S
   5          **  延时口令模式： 即识别时都说“小杰”这个口令唤醒后，如果15秒内不进行语音识别则退出唤醒
   6          /*********************************************************/
   7          
   8          #include "config.h"
   9          #include <stdlib.h>
  10          #include <string.h>
  11          #include <stdio.h>
  12          /************************************************************************************/
  13          //  nAsrStatus 用来在main主程序中表示程序运行的状态，不是LD3320芯片内部的状态寄存器
  14          //  LD_ASR_NONE:    表示没有在作ASR识别
  15          //  LD_ASR_RUNING：   表示LD3320正在作ASR识别中
  16          //  LD_ASR_FOUNDOK:   表示一次识别流程结束后，有一个识别结果
  17          //  LD_ASR_FOUNDZERO: 表示一次识别流程结束后，没有识别结果
  18          //  LD_ASR_ERROR:   表示一次识别流程中LD3320芯片内部出现不正确的状态
  19          /***********************************************************************************/
  20          uint8 idata nAsrStatus = 0;
  21          void MCU_init();
  22          void ProcessInt0(); // 识别处理函数
  23          void delay(unsigned long uldata);
  24          void User_handle(uint8 dat); // 用户执行操作函数
  25          void Delay200ms();
  26          void Led_test(void);       // 单片机工作指示
  27          uint8_t G0_flag = DISABLE; // 运行标志，ENABLE:运行。DISABLE:禁止运行
  28          sbit LED = P4 ^ 2;         // 信号指示灯
  29          uint16_t over_time;
  30          
  31          sbit SRD1 = P1 ^ 7;
  32          sbit SRD2 = P1 ^ 6;
  33          sbit SRD3 = P1 ^ 5;
  34          sbit SRD4 = P1 ^ 4;
  35          
  36          uint8_t send_city_code(char *city_name);
  37          
  38          /***********************************************************
  39           * 名    称： void  main(void)
  40           * 功    能： 主函数  程序入口
  41           * 入口参数：
  42           * 出口参数：
  43           * 说    明：
  44           * 调用方法：
  45           **********************************************************/
  46          void main(void)
  47          {
  48   1          uint8 idata nAsrRes;
  49   1          uint8 i = 0;
  50   1          uint8_t city_name[10] = {0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 5, 6, 7, 8, 9};
  51   1          P1M0 = 0xFF;
  52   1          P1M1 = 0x00;
  53   1          SRD1 = SRD2 = SRD3 = SRD4 = 0;
  54   1          Led_test();
C51 COMPILER V9.60.0.0   MAIN                                                              05/09/2024 22:01:22 PAGE 2   

  55   1          MCU_init();
  56   1          LD_Reset();
  57   1          UartIni();                /*串口初始化*/
  58   1          nAsrStatus = LD_ASR_NONE; //  初始状态：没有在作ASR
  59   1                                    // PrintCom("<G>欢迎使用");
  60   1          // send_city_code("shanghai");
  61   1          // print_hex(city_name, 10);
  62   1          over_time = 0;
  63   1          while (1)
  64   1          {
  65   2              if (over_time >= 4000)
  66   2              {
  67   3                  over_time = 0;
  68   3                  G0_flag = DISABLE;
  69   3                  LED = 1;
  70   3                  // PrintCom("<G>主人，我先退下了");
  71   3              }
  72   2              switch (nAsrStatus)
  73   2              {
  74   3              case LD_ASR_RUNING:
  75   3              case LD_ASR_ERROR:
  76   3                  break;
  77   3              case LD_ASR_NONE:
  78   3              {
  79   4                  nAsrStatus = LD_ASR_RUNING;
  80   4                  if (RunASR() == 0) /* 启动一次ASR识别流程：ASR初始化，ASR添加关键词语，启动ASR运算*/
  81   4                  {
  82   5                      nAsrStatus = LD_ASR_ERROR;
  83   5                  }
  84   4                  break;
  85   4              }
  86   3              case LD_ASR_FOUNDOK: /* 一次ASR识别流程结束，去取ASR识别结果*/
  87   3              {
  88   4                  nAsrRes = LD_GetResult(); /*获取结果*/
  89   4                  User_handle(nAsrRes);     // 用户执行函数
  90   4                  nAsrStatus = LD_ASR_NONE;
  91   4                  break;
  92   4              }
  93   3              case LD_ASR_FOUNDZERO:
  94   3              default:
  95   3              {
  96   4                  nAsrStatus = LD_ASR_NONE;
  97   4                  break;
  98   4              }
  99   3              } // switch
 100   2          } // while
 101   1      }
 102          /***********************************************************
 103           * 名    称：    LED灯测试
 104           * 功    能： 单片机是否工作指示
 105           * 入口参数： 无
 106           * 出口参数：无
 107           * 说    明：
 108           **********************************************************/
 109          void Led_test(void)
 110          {
 111   1          LED = ~LED;
 112   1          Delay200ms();
 113   1          LED = ~LED;
 114   1          Delay200ms();
 115   1          LED = ~LED;
 116   1          Delay200ms();
C51 COMPILER V9.60.0.0   MAIN                                                              05/09/2024 22:01:22 PAGE 3   

 117   1          LED = ~LED;
 118   1          Delay200ms();
 119   1          LED = ~LED;
 120   1          Delay200ms();
 121   1          LED = ~LED;
 122   1      }
 123          /***********************************************************
 124           * 名    称： void MCU_init()
 125           * 功    能： 单片机初始化
 126           * 入口参数：
 127           * 出口参数：
 128           * 说    明：
 129           * 调用方法：
 130           **********************************************************/
 131          void MCU_init()
 132          {
 133   1          P0 = 0xff;
 134   1          P1 = 0x00;
 135   1          P2 = 0xff;
 136   1          P3 = 0xff;
 137   1          P4 = 0xff;
 138   1      
 139   1          AUXR &= 0x7F; // 定时器时钟12T模式
 140   1          TMOD |= 0x01; // 设置定时器模式
 141   1          TL0 = 0x00;   // 设置定时初值
 142   1          TH0 = 0x28;   // 设置定时初值
 143   1          TF0 = 0;      // 清除TF0标志
 144   1          TR0 = 1;      // 定时器0开始计时
 145   1          ET0 = 1;
 146   1      
 147   1          LD_MODE = 0; // 设置MD管脚为低，并行模式读写
 148   1          IE0 = 1;
 149   1          EX0 = 1;
 150   1          EA = 1;
 151   1          WDT_CONTR = 0x3D;
 152   1      }
 153          /***********************************************************
 154           * 名    称： 延时函数
 155           * 功    能：
 156           * 入口参数：
 157           * 出口参数：
 158           * 说    明：
 159           * 调用方法：
 160           **********************************************************/
 161          void Delay200us() //@22.1184MHz
 162          {
 163   1          unsigned char i, j;
 164   1          _nop_();
 165   1          _nop_();
 166   1          i = 5;
 167   1          j = 73;
 168   1          do
 169   1          {
 170   2              while (--j)
 171   2                  ;
 172   2          } while (--i);
 173   1      }
 174          
 175          void delay(unsigned long uldata)
 176          {
 177   1          unsigned int j = 0;
 178   1          unsigned int g = 0;
C51 COMPILER V9.60.0.0   MAIN                                                              05/09/2024 22:01:22 PAGE 4   

 179   1          while (uldata--)
 180   1              Delay200us();
 181   1      }
 182          
 183          void Delay200ms() //@22.1184MHz
 184          {
 185   1          unsigned char i, j, k;
 186   1      
 187   1          i = 17;
 188   1          j = 208;
 189   1          k = 27;
 190   1          do
 191   1          {
 192   2              do
 193   2              {
 194   3                  while (--k)
 195   3                      ;
 196   3              } while (--j);
 197   2          } while (--i);
 198   1      }
 199          
 200          /***********************************************************
 201           * 名    称： 中断处理函数
 202           * 功    能：
 203           * 入口参数：
 204           * 出口参数：
 205           * 说    明：
 206           * 调用方法：
 207           **********************************************************/
 208          void ExtInt0Handler(void) interrupt 0
 209          {
 210   1          ProcessInt0();
 211   1      }
 212          
 213          uint8_t send_city_code(char *city_name)
 214          {
 215   1          uint8_t namelen = strlen(city_name);
 216   1          uint8_t msg[20] = {0};
 217   1          uint8_t msg_cnt = 0;
 218   1          uint8_t i = 0;
 219   1          // char print_buf[40] = {0};
 220   1      
 221   1          msg[msg_cnt++] = 0xA0;    // 协议帧头
 222   1          msg[msg_cnt++] = namelen; // 数据长度
 223   1      
 224   1          for (i = 0; i < namelen; i++)
 225   1          {
 226   2              msg[i + 2] = city_name[i]; // 数据内容
 227   2          }
 228   1          // print_hex(msg, msg_cnt);
 229   1      
 230   1          // memcpy(&msg[msg_cnt], city_name, namelen); // 数据内容
 231   1          msg_cnt += namelen;
 232   1      
 233   1          msg[msg_cnt++] = 0xAA; // 协议帧尾
 234   1          // sprintf(print_buf, "%s len = %bu", city_name, msg_cnt); // 数据内容
 235   1          // PrintCom(print_buf);
 236   1      
 237   1          // 发送两次避免波特率不稳定导致帧头错误的问题
 238   1          print_hex(msg, msg_cnt);
 239   1          delay(200); // 200*200 = 40000us
 240   1          print_hex(msg, msg_cnt);
C51 COMPILER V9.60.0.0   MAIN                                                              05/09/2024 22:01:22 PAGE 5   

 241   1      
 242   1          return 0;
 243   1      }
 244          
 245          /***********************************************************
 246           * 名    称：用户执行函数
 247           * 功    能：识别成功后，执行动作可在此进行修改
 248           * 入口参数： 无
 249           * 出口参数：无
 250           * 说    明：
 251           **********************************************************/
 252          void User_handle(uint8 dat)
 253          {
 254   1          if (0 == dat)
 255   1          {
 256   2              G0_flag = ENABLE;
 257   2              over_time = 0;
 258   2              PrintCom("<G>你好，主人");
 259   2              LED = 0;
 260   2          }
 261   1          else if (ENABLE == G0_flag)
 262   1          {
 263   2              //    G0_flag = DISABLE;
 264   2              //    LED = 1;
 265   2              switch (dat)
 266   2              {
 267   3              case CODE_1: /*命令“开灯”*/
 268   3                  over_time = 0;
 269   3                  SRD1 = 1;
 270   3                  send_city_code("shanghai");
 271   3                  break;
 272   3              case CODE_2: /*命令“关灯”*/
 273   3                  over_time = 0;
 274   3                  SRD1 = 0;
 275   3                  send_city_code("beijing");
 276   3                  break;
 277   3              case CODE_3: /*命令“打开电视”*/
 278   3                  over_time = 0;
 279   3                  SRD2 = 1;
 280   3                  send_city_code("guangdong");
 281   3                  break;
 282   3              case CODE_4: /*命令“关闭电视”*/
 283   3                  over_time = 0;
 284   3                  SRD2 = 0;
 285   3                  send_city_code("guangdong");
 286   3                  break;
 287   3              case CODE_5: /*命令“打开冰箱”*/
 288   3                  over_time = 0;
 289   3                  SRD3 = 1;
 290   3                  send_city_code("guangdongshenzhen");
 291   3                  break;
 292   3              case CODE_6: /*命令“关闭冰箱”*/
 293   3                  over_time = 0;
 294   3                  SRD3 = 0;
 295   3                  send_city_code("tianjin");
 296   3                  break;
 297   3              case CODE_7: /*命令“打开空调”*/
 298   3                  over_time = 0;
 299   3                  SRD4 = 1;
 300   3                  send_city_code("sichuanchengdu");
 301   3                  break;
 302   3              case CODE_8: /*命令“关闭空调”*/
C51 COMPILER V9.60.0.0   MAIN                                                              05/09/2024 22:01:22 PAGE 6   

 303   3                  over_time = 0;
 304   3                  SRD4 = 0;
 305   3                  send_city_code("chongqing");
 306   3                  break;
 307   3              case CODE_9: /*命令“全部打开”*/
 308   3                  over_time = 0;
 309   3                  SRD1 = 1;
 310   3                  SRD2 = 1;
 311   3                  SRD3 = 1;
 312   3                  SRD4 = 1;
 313   3                  send_city_code("jiangsunanjing");
 314   3                  break;
 315   3              case CODE_10: /*命令“全部关闭”*/
 316   3                  over_time = 0;
 317   3                  SRD1 = 0;
 318   3                  SRD2 = 0;
 319   3                  SRD3 = 0;
 320   3                  SRD4 = 0;
 321   3                  send_city_code("hubeiwuhan");
 322   3                  break;
 323   3              case CODE_11: /*命令“.....”*/
 324   3                  over_time = 0;
 325   3                  send_city_code("zhejianghangzhou");
 326   3                  break;
 327   3              case CODE_12: /*命令“.....”*/
 328   3                  over_time = 0;
 329   3                  send_city_code("guangdongdongguan");
 330   3                  break;
 331   3              case CODE_13: /*命令“.....”*/
 332   3                  over_time = 0;
 333   3                  send_city_code("shandongqingdao");
 334   3                  break;
 335   3              case CODE_14: /*命令“.....”*/
 336   3                  over_time = 0;
 337   3                  send_city_code("liaoningshenyang");
 338   3                  break;
 339   3              case CODE_15: /*命令“.....”*/
 340   3                  over_time = 0;
 341   3                  send_city_code("zhejiangningbo");
 342   3                  break;
 343   3              case CODE_16: /*命令“.....”*/
 344   3                  over_time = 0;
 345   3                  send_city_code("jiangsusuzhou");
 346   3                  break;
 347   3              case CODE_17: /*命令“.....”*/
 348   3                  over_time = 0;
 349   3                  send_city_code("yunnankunming");
 350   3                  break;
 351   3              case CODE_18: /*命令“.....”*/
 352   3                  over_time = 0;
 353   3                  send_city_code("hunanchangsha");
 354   3                  break;
 355   3              case CODE_19: /*命令“.....”*/
 356   3                  over_time = 0;
 357   3                  send_city_code("shanxixian");
 358   3                  break;
 359   3              case CODE_20: /*命令“.....”*/
 360   3                  over_time = 0;
 361   3                  send_city_code("heilongjianghaerbin");
 362   3                  break;
 363   3              case CODE_21: /*命令“.....”*/
 364   3                  over_time = 0;
C51 COMPILER V9.60.0.0   MAIN                                                              05/09/2024 22:01:22 PAGE 7   

 365   3                  send_city_code("anhuihefei");
 366   3                  break;
 367   3              case CODE_22: /*命令“.....”*/
 368   3                  over_time = 0;
 369   3                  send_city_code("fujianfuzhou");
 370   3                  break;
 371   3              case CODE_23: /*命令“.....”*/
 372   3                  over_time = 0;
 373   3                  send_city_code("guangdongfoshan");
 374   3                  break;
 375   3              case CODE_24: /*命令“.....”*/
 376   3                  over_time = 0;
 377   3                  send_city_code("fujianxiamen");
 378   3                  break;
 379   3              case CODE_25: /*命令“.....”*/
 380   3                  over_time = 0;
 381   3                  send_city_code("jilinchangchun");
 382   3                  break;
 383   3              case CODE_26: /*命令“.....”*/
 384   3                  over_time = 0;
 385   3                  send_city_code("zhejiangwenzhou");
 386   3                  break;
 387   3              case CODE_27: /*命令“.....”*/
 388   3                  over_time = 0;
 389   3                  send_city_code("hebeijiazhuang");
 390   3                  break;
 391   3              case CODE_28: /*命令“.....”*/
 392   3                  over_time = 0;
 393   3                  send_city_code("jiangxinanchang");
 394   3                  break;
 395   3              case CODE_29: /*命令“.....”*/
 396   3                  over_time = 0;
 397   3                  send_city_code("jiangsuchangzhou");
 398   3                  break;
 399   3              case CODE_30: /*命令“.....”*/
 400   3                  over_time = 0;
 401   3                  send_city_code("shandongjinan");
 402   3                  break;
 403   3              case CODE_31: /*命令“.....”*/
 404   3                  over_time = 0;
 405   3                  send_city_code("shanxitaiyuan");
 406   3                  break;
 407   3              case CODE_32: /*命令“.....”*/
 408   3                  over_time = 0;
 409   3                  send_city_code("henanzhengzhou");
 410   3                  break;
 411   3              case CODE_33: /*命令“.....”*/
 412   3                  over_time = 0;
 413   3                  send_city_code("jiangsuwuxi");
 414   3                  break;
 415   3              case CODE_34: /*命令“.....”*/
 416   3                  over_time = 0;
 417   3                  send_city_code("liaoningdalian");
 418   3                  break;
 419   3              case CODE_35: /*命令“.....”*/
 420   3                  over_time = 0;
 421   3                  send_city_code("fujianningde");
 422   3                  break;
 423   3              case CODE_36: /*命令“.....”*/
 424   3                  over_time = 0;
 425   3                  send_city_code("jiangsunantong");
 426   3                  break;
C51 COMPILER V9.60.0.0   MAIN                                                              05/09/2024 22:01:22 PAGE 8   

 427   3              case CODE_37: /*命令“.....”*/
 428   3                  over_time = 0;
 429   3                  send_city_code("zhejiangjinhua");
 430   3                  break;
 431   3              case CODE_38: /*命令“.....”*/
 432   3                  over_time = 0;
 433   3                  send_city_code("shanxichangzhi");
 434   3                  break;
 435   3              case CODE_39: /*命令“.....”*/
 436   3                  over_time = 0;
 437   3                  send_city_code("jiangsuchangshu");
 438   3                  break;
 439   3              case CODE_40: /*命令“.....”*/
 440   3                  over_time = 0;
 441   3                  send_city_code("jiangsuxuzhou");
 442   3                  break;
 443   3              case CODE_41: /*命令“.....”*/
 444   3                  over_time = 0;
 445   3                  PrintCom("");
 446   3                  break;
 447   3              case CODE_42: /*命令“.....”*/
 448   3                  over_time = 0;
 449   3                  PrintCom("");
 450   3                  break;
 451   3              case CODE_43: /*命令“.....”*/
 452   3                  over_time = 0;
 453   3                  PrintCom("");
 454   3                  break;
 455   3              case CODE_44: /*命令“.....”*/
 456   3                  over_time = 0;
 457   3                  PrintCom("");
 458   3                  break;
 459   3              case CODE_45: /*命令“.....”*/
 460   3                  over_time = 0;
 461   3                  PrintCom("");
 462   3                  break;
 463   3              case CODE_46: /*命令“.....”*/
 464   3                  over_time = 0;
 465   3                  PrintCom("");
 466   3                  break;
 467   3              case CODE_47: /*命令“.....”*/
 468   3                  over_time = 0;
 469   3                  PrintCom("");
 470   3                  break;
 471   3              case CODE_48: /*命令“.....”*/
 472   3                  over_time = 0;
 473   3                  PrintCom("");
 474   3                  break;
 475   3              case CODE_49: /*命令“.....”*/
 476   3                  over_time = 0;
 477   3                  PrintCom("");
 478   3                  break;
 479   3              default: /*text.....*/
 480   3                  break;
 481   3              }
 482   2          }
 483   1          else
 484   1          {
 485   2              // PrintCom("请说出一级口令\r\n"); /*text.....*/
 486   2          }
 487   1      }
 488          
C51 COMPILER V9.60.0.0   MAIN                                                              05/09/2024 22:01:22 PAGE 9   

 489          void tm0_isr() interrupt 1
 490          {
 491   1          TL0 = 0x00; // 设置定时初值
 492   1          TH0 = 0x28; // 设置定时初值
 493   1          WDT_CONTR = 0x3D;
 494   1          if (G0_flag == ENABLE)
 495   1          {
 496   2              over_time++;
 497   2          }
 498   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1451    ----
   CONSTANT SIZE    =    595    ----
   XDATA SIZE       =      3      45
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =      1       1
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
